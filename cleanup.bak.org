#+title: Cleanup Bak

* Code section snippets
** Packages

;; Code related
;;(package! x86-lookup)
;;(package! nasm-mode)
** Code
*** python
;; use python3 by default
;;(setq python-shell-interpreter "python3")
;;v(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
*** lsp

;; (after! lsp-mode
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "mspyls")
;;                     :major-modes '(python-mode)
;;                     :remote? t
;;                     :server-id 'mspyls-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "/usr/local/bin/bash-language-server")
;;                     :major-modes '(sh-mode)
;;                     :remote? t
;;                     :server-id 'bash-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection 'lsp-clients--clangd-command)
;;                     :major-modes '(c++-mode c-mode cc-mode)
;;                     :remote? t
;;                     :server-id 'clangd-remote)))

;; (after! lsp
;;   (setq lsp-lens-enable t
;;         lsp-headerline-breadcrumb-enable t
;;         lsp-modeline-code-actions-enable t
;;         lsp-diagnostics-provider :auto
;;         lsp-modeline-diagnostics-enable t
;;         lsp-signature-auto-activate t
;;         lsp-signature-render-documentation t
;;         lsp-completion-show-detail t
;;         lsp-completion-show-kind t))

;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-code-actions t
;;         lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-diagnostics t))
*** Assembly

;; (use-package x86-lookup
;;   :defer t
;;   :config
;;   (setq  x86-lookup-pdf "~/Documents/Papers/Intel_64_and_IA-32_Architecture_Software_Developer_Manual.pdf"))

;; (use-package nasm-mode
;;   :defer t
;;   :config
;;   (add-hook 'asm-mode-hook 'nasm-mode))

;;(add-to-list 'auto-mode-alist '("\\.nasm\\'" . nasm-mode))

* Connections
;;:PROPERTIES:
;;:ID:       7018c3c5-ffc5-4b4d-a2cc-ae70796fd448
;;:END:
;;#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_connection
;;;
;;;

;; (after! tramp
;;   (setenv "SHELL" "/bin/bash")
;;   (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>î‚°] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) ;; defult + î‚°

;; When connecting over tramp it takes a long time processing projectile
(defadvice projectile-project-root (around ignore-remote first activate)
  (unless (file-remote-p default-directory) ad-do-it))
;;;
;;;
;;; END_connection
;;;
;;;
;;#+END_SRC

* Elfeed
;;(use-package! elfeed-goodies
;;  :after elfeed)

* Gist
;; ;; use browse-url with gist
;; (setq gist-view-gist t)
* dark pdf
;; Not really readable

;; (after! pdf-tools
;;   ;; automatically turns on midnight-mode for
;;   (add-hook 'pdf-view-mode-hook (lambda ()
;;                                   (pdf-view-midnight-minor-mode))))
* Org-ref and mendeley
;;TODO Add some more of the org-ref helpers here
;; (after! org-ref
;;   (setq bibtex-autokey-year-length 4
;;         bibtex-autokey-name-year-separator nil
;;         bibtex-autokey-year-title-separator nil
;;         bibtex-autokey-titleword-separator nil
;;         bibtex-autokey-titlewords 0
;;         bibtex-autokey-titlewords-stretch nil
;;         bibtex-autokey-titleword-length 0)
;;   (require 'doi-utils)
;;   (require 'org-ref-arxiv)
;;   (require 'org-ref-pdf)
;; )

;; Let org-ref know we are using mendeley
;;(setq org-ref-get-pdf-filename-function 'org-ref-get-mendeley-filename)
