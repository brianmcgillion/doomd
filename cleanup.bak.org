#+title: Cleanup Bak

* Code section snippets
** Packages

;; Code related
;;(package! x86-lookup)
;;(package! nasm-mode)
** Code
*** python
;; use python3 by default
;;(setq python-shell-interpreter "python3")
;;v(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
*** lsp

;; (after! lsp-mode
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "mspyls")
;;                     :major-modes '(python-mode)
;;                     :remote? t
;;                     :server-id 'mspyls-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "/usr/local/bin/bash-language-server")
;;                     :major-modes '(sh-mode)
;;                     :remote? t
;;                     :server-id 'bash-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection 'lsp-clients--clangd-command)
;;                     :major-modes '(c++-mode c-mode cc-mode)
;;                     :remote? t
;;                     :server-id 'clangd-remote)))

;; (after! lsp
;;   (setq lsp-lens-enable t
;;         lsp-headerline-breadcrumb-enable t
;;         lsp-modeline-code-actions-enable t
;;         lsp-diagnostics-provider :auto
;;         lsp-modeline-diagnostics-enable t
;;         lsp-signature-auto-activate t
;;         lsp-signature-render-documentation t
;;         lsp-completion-show-detail t
;;         lsp-completion-show-kind t))

;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-code-actions t
;;         lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-diagnostics t))
*** Assembly

;; (use-package x86-lookup
;;   :defer t
;;   :config
;;   (setq  x86-lookup-pdf "~/Documents/Papers/Intel_64_and_IA-32_Architecture_Software_Developer_Manual.pdf"))

;; (use-package nasm-mode
;;   :defer t
;;   :config
;;   (add-hook 'asm-mode-hook 'nasm-mode))

;;(add-to-list 'auto-mode-alist '("\\.nasm\\'" . nasm-mode))

* Connections
;;:PROPERTIES:
;;:ID:       7018c3c5-ffc5-4b4d-a2cc-ae70796fd448
;;:END:
;;#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_connection
;;;
;;;

;; (after! tramp
;;   (setenv "SHELL" "/bin/bash")
;;   (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) ;; defult + 

;; When connecting over tramp it takes a long time processing projectile
(defadvice projectile-project-root (around ignore-remote first activate)
  (unless (file-remote-p default-directory) ad-do-it))
;;;
;;;
;;; END_connection
;;;
;;;
;;#+END_SRC

* Elfeed
;;(use-package! elfeed-goodies
;;  :after elfeed)

* Gist
;; ;; use browse-url with gist
;; (setq gist-view-gist t)
* dark pdf
;; Not really readable

;; (after! pdf-tools
;;   ;; automatically turns on midnight-mode for
;;   (add-hook 'pdf-view-mode-hook (lambda ()
;;                                   (pdf-view-midnight-minor-mode))))
* Org-ref and mendeley
;;TODO Add some more of the org-ref helpers here
;; (after! org-ref
;;   (setq bibtex-autokey-year-length 4
;;         bibtex-autokey-name-year-separator nil
;;         bibtex-autokey-year-title-separator nil
;;         bibtex-autokey-titleword-separator nil
;;         bibtex-autokey-titlewords 0
;;         bibtex-autokey-titlewords-stretch nil
;;         bibtex-autokey-titleword-length 0)
;;   (require 'doi-utils)
;;   (require 'org-ref-arxiv)
;;   (require 'org-ref-pdf)
;; )

;; Let org-ref know we are using mendeley
;;(setq org-ref-get-pdf-filename-function 'org-ref-get-mendeley-filename)
* org-roam-bibtex
;; need to set the package properly in packages.el
;; (use-package! org-roam-bibtex
;;   :when (modulep! :lang org +roam2)
;;   :after org-roam
;;   :preface
;;   ;; if the user has not set a template mechanism set a reasonable one of them
;;   ;; The package already tests for nil itself so we define a dummy tester
;;   (defvar orb-preformat-keywords
;;     '("title" "url" "file" "author-or-editor" "keywords" "citekey" "pdf"))
;;   :hook (org-roam-mode . org-roam-bibtex-mode)
;;   :custom
;;   (orb-note-actions-interface (cond ((modulep! :completion ivy)  'ivy)
;;                                     ((modulep! :completion helm) 'helm)
;;                                     ((t                          'default))))
;;   :config
;;   (setq orb-insert-interface (cond ((modulep! :completion ivy)  'ivy-bibtex)
;;                                    ((modulep! :completion helm) 'helm-bibtex)
;;                                    ((t                          'generic))))
;;   (setq orb-process-file-keyword t
;;         orb-file-field-extensions '("pdf"))

;;   ;; TODO remove the hard coded path, should use a concatination instead of doc..org..
;;   (add-to-list 'org-roam-capture-templates
;;                '("b" "Bibliography note" plain
;;                  (file "~/Documents/org/ORB_template.org")
;;                  :if-new (file+head "${citekey}.org" ":PROPERTIES:
;;  :ROAM_REFS: cite:${citekey}
;;  :END:
;;  #+TITLE: ${title}\n")
;;                  :unnarrowed t)))

* pretty org capture menu

# #+begin_src emacs-lisp
# (use-package! doct
#   :commands doct)
# #+end_src

# #+begin_src emacs-lisp :noweb no-export
# (after! org-capture
#   ;; TODO When opening org-capture first the doct templates are called and enabled nicely
#   ;; TODO When called after e.g. org-agenda the default non formatted list is in use
#   ;; TODO What is the timing issue and look at debug-init to see if it has a big impact on performacs to move these out of use package
#   ;; TODO this sets the org-capture templates. so this needs to be moved out of function scope
#   ;;

#   <<prettify-capture>>

#   (defun +doct-icon-declaration-to-icon (declaration)
#     "Convert :icon declaration to icon"
#     (let ((name (pop declaration))
#           (set  (intern (concat "nerd-icons-" (plist-get declaration :set))))
#           (face (intern (concat "nerd-icons-" (plist-get declaration :color))))
#           (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
#       (apply set `(,name :face ,face :v-adjust ,v-adjust))))

#   (defun +doct-iconify-capture-templates (groups)
#     "Add declaration's :icon to each template group in GROUPS."
#     (let ((templates (doct-flatten-lists-in groups)))
#       (setq doct-templates (mapcar (lambda (template)
#                                      (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
#                                                  (spec (plist-get (plist-get props :doct) :icon)))
#                                        (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
#                                                                       "\t"
#                                                                       (nth 1 template))))
#                                      template)
#                                    templates))))

#   (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

#   (defun set-org-capture-templates ()
#     (setq org-capture-templates
#           (doct `(("Personal todo" :keys "t"
#                    :icon ("nf-oct-checklist" :set "octicon" :color "green")
#                    :file +org-capture-todo-file
#                    :prepend t
#                    :headline "Inbox"
#                    :type entry
#                    :template ("* TODO %?"
#                               "%i %a"))
#                   ("Personal note" :keys "n"
#                    :icon ("nf-fa-sticky_note_o" :set "faicon" :color "green")
#                    :file +org-capture-todo-file
#                    :prepend t
#                    :headline "Inbox"
#                    :type entry
#                    :template ("* %?"
#                               "%i %a"))
#                   ("Email" :keys "e"
#                    :icon ("nf-fa-envelope" :set "faicon" :color "blue")
#                    :file +org-capture-todo-file
#                    :prepend t
#                    :headline "Inbox"
#                    :type entry
#                    :template ("* TODO %^{type|reply to|contact} %\\3 %? :email:"
#                               "Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}"
#                               "about %^{topic}"
#                               "%U %i %a"))
#                   ("Interesting" :keys "i"
#                    :icon ("nf-fa-eye" :set "faicon" :color "lcyan")
#                    :file +org-capture-todo-file
#                    :prepend t
#                    :headline "Interesting"
#                    :type entry
#                    :template ("* [ ] %{desc}%? :%{i-type}:"
#                               "%i %a")
#                    :children (("Webpage" :keys "w"
#                                :icon ("nf-fa-globe" :set "faicon" :color "green")
#                                :desc "%(org-cliplink-capture) "
#                                :i-type "read:web")
#                               ("Article" :keys "a"
#                                :icon ("nf-fa-file_text" :set "faicon" :color "yellow")
#                                :desc ""
#                                :i-type "read:reaserch")
#                               ("Information" :keys "i"
#                                :icon ("nf-fa-info_circle" :set "faicon" :color "blue")
#                                :desc ""
#                                :i-type "read:info")
#                               ("Idea" :keys "I"
#                                :icon ("nf-md-chart_bubble" :set "mdicon" :color "silver")
#                                :desc ""
#                                :i-type "idea")))
#                   ("Tasks" :keys "k"
#                    :icon ("nf-oct-inbox" :set "octicon" :color "yellow")
#                    :file +org-capture-todo-file
#                    :prepend t
#                    :headline "Tasks"
#                    :type entry
#                    :template ("* TODO %? %^G%{extra}"
#                               "%i %a")
#                    :children (("General Task" :keys "k"
#                                :icon ("nf-oct-inbox" :set "octicon" :color "yellow")
#                                :extra "")
#                               ("Task with deadline" :keys "d"
#                                :icon ("nf-md-timer" :set "mdicon" :color "orange" :v-adjust -0.1)
#                                :extra "\nDEADLINE: %^{Deadline:}t")
#                               ("Scheduled Task" :keys "s"
#                                :icon ("nf-oct-calendar" :set "octicon" :color "orange")
#                                :extra "\nSCHEDULED: %^{Start time:}t")))
#                   ("Project" :keys "p"
#                    :icon ("nf-oct-repo" :set "octicon" :color "silver")
#                    :prepend t
#                    :type entry
#                    :headline "Inbox"
#                    :template ("* %{time-or-todo} %?"
#                               "%i"
#                               "%a")
#                    :file ""
#                    :custom (:time-or-todo "")
#                    :children (("Project-local todo" :keys "t"
#                                :icon ("nf-oct-checklist" :set "octicon" :color "green")
#                                :time-or-todo "TODO"
#                                :file +org-capture-project-todo-file)
#                               ("Project-local note" :keys "n"
#                                :icon ("nf-fa-sticky_note" :set "faicon" :color "yellow")
#                                :time-or-todo "%U"
#                                :file +org-capture-project-notes-file)
#                               ("Project-local changelog" :keys "c"
#                                :icon ("nf-fa-list" :set "faicon" :color "blue")
#                                :time-or-todo "%U"
#                                :heading "Unreleased"
#                                :file +org-capture-project-changelog-file)))
#                   ("\tCentralised project templates"
#                    :keys "o"
#                    :type entry
#                    :prepend t
#                    :template ("* %{time-or-todo} %?"
#                               "%i"
#                               "%a")
#                    :children (("Project todo"
#                                :keys "t"
#                                :prepend nil
#                                :time-or-todo "TODO"
#                                :heading "Tasks"
#                                :file +org-capture-central-project-todo-file)
#                               ("Project note"
#                                :keys "n"
#                                :time-or-todo "%U"
#                                :heading "Notes"
#                                :file +org-capture-central-project-notes-file)
#                               ("Project changelog"
#                                :keys "c"
#                                :time-or-todo "%U"
#                                :heading "Unreleased"
#                                :file +org-capture-central-project-changelog-file)))))))

#   (set-org-capture-templates)
#   (unless (display-graphic-p)
#     (add-hook 'server-after-make-frame-hook
#               (defun org-capture-reinitialise-hook ()
#                 (when (display-graphic-p)
#                   (set-org-capture-templates)
#                   (remove-hook 'server-after-make-frame-hook
#                                #'org-capture-reinitialise-hook))))))
# #+end_src

# Improve how the capture dialog looks.
# #+name: prettify-capture
# #+begin_src emacs-lisp :noweb-ref none
# (defun org-capture-select-template-prettier (&optional keys)
#   "Select a capture template, in a prettier way than default
# Lisp programs can force the template by setting KEYS to a string."
#   (let ((org-capture-templates
#          (or (org-contextualize-keys
#               (org-capture-upgrade-templates org-capture-templates)
#               org-capture-templates-contexts)
#              '(("t" "Task" entry (file+headline "" "Tasks")
#                 "* TODO %?\n  %u\n  %a")))))
#     (if keys
#         (or (assoc keys org-capture-templates)
#             (error "No capture template referred to by \"%s\" keys" keys))
#       (org-mks org-capture-templates
#                "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
#                "Template key: "
#                `(("q" ,(concat (nerd-icons-octicon "nf-oct-stop" :face 'nerd-icons-red :v-adjust 0.01) "\tAbort")))))))
# (advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

# (defun org-mks-pretty (table title &optional prompt specials)
#   "Select a member of an alist with multiple keys. Prettified.

# TABLE is the alist which should contain entries where the car is a string.
# There should be two types of entries.

# 1. prefix descriptions like (\"a\" \"Description\")
#    This indicates that `a' is a prefix key for multi-letter selection, and
#    that there are entries following with keys like \"ab\", \"ax\"…

# 2. Select-able members must have more than two elements, with the first
#    being the string of keys that lead to selecting it, and the second a
#    short description string of the item.

# The command will then make a temporary buffer listing all entries
# that can be selected with a single key, and all the single key
# prefixes.  When you press the key for a single-letter entry, it is selected.
# When you press a prefix key, the commands (and maybe further prefixes)
# under this key will be shown and offered for selection.

# TITLE will be placed over the selection in the temporary buffer,
# PROMPT will be used when prompting for a key.  SPECIALS is an
# alist with (\"key\" \"description\") entries.  When one of these
# is selected, only the bare key is returned."
#   (save-window-excursion
#     (let ((inhibit-quit t)
#           (buffer (org-switch-to-buffer-other-window "*Org Select*"))
#           (prompt (or prompt "Select: "))
#           case-fold-search
#           current)
#       (unwind-protect
#           (catch 'exit
#             (while t
#               (setq-local evil-normal-state-cursor (list nil))
#               (erase-buffer)
#               (insert title "\n\n")
#               (let ((des-keys nil)
#                     (allowed-keys '("\C-g"))
#                     (tab-alternatives '("\s" "\t" "\r"))
#                     (cursor-type nil))
#                 ;; Populate allowed keys and descriptions keys
#                 ;; available with CURRENT selector.
#                 (let ((re (format "\\`%s\\(.\\)\\'"
#                                   (if current (regexp-quote current) "")))
#                       (prefix (if current (concat current " ") "")))
#                   (dolist (entry table)
#                     (pcase entry
#                       ;; Description.
#                       (`(,(and key (pred (string-match re))) ,desc)
#                        (let ((k (match-string 1 key)))
#                          (push k des-keys)
#                          ;; Keys ending in tab, space or RET are equivalent.
#                          (if (member k tab-alternatives)
#                              (push "\t" allowed-keys)
#                            (push k allowed-keys))
#                          (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
#                       ;; Usable entry.
#                       (`(,(and key (pred (string-match re))) ,desc . ,_)
#                        (let ((k (match-string 1 key)))
#                          (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
#                          (push k allowed-keys)))
#                       (_ nil))))
#                 ;; Insert special entries, if any.
#                 (when specials
#                   (insert "─────────────────────────\n")
#                   (pcase-dolist (`(,key ,description) specials)
#                     (insert (format "%s   %s\n" (propertize key 'face '(bold nerd-icons-red)) description))
#                     (push key allowed-keys)))
#                 ;; Display UI and let user select an entry or
#                 ;; a sub-level prefix.
#                 (goto-char (point-min))
#                 (unless (pos-visible-in-window-p (point-max))
#                   (org-fit-window-to-buffer))
#                 (let ((pressed (org--mks-read-key allowed-keys
#                                                   prompt
#                                                   (not (pos-visible-in-window-p (1- (point-max)))))))
#                   (setq current (concat current pressed))
#                   (cond
#                    ((equal pressed "\C-g") (user-error "Abort"))
#                    ;; Selection is a prefix: open a new menu.
#                    ((member pressed des-keys))
#                    ;; Selection matches an association: return it.
#                    ((let ((entry (assoc current table)))
#                       (and entry (throw 'exit entry))))
#                    ;; Selection matches a special entry: return the
#                    ;; selection prefix.
#                    ((assoc current specials) (throw 'exit current))
#                    (t (error "No entry available")))))))
#         (when buffer (kill-buffer buffer))))))
# (advice-add 'org-mks :override #'org-mks-pretty)
#+end_src
