;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
* Repos
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_REPOS
;;;
;;;

;; Enable the debugger when needed
;;(setq debug-on-error t)

;;;
;;;
;;; END_REPOS
;;;
;;;
#+END_SRC
* Interface Tweeks
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Interface_Tweaks
;;;
;;;

;; When starting a new frame make it maximized
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;;;
;;;
;;; END_Interface_Tweaks
;;;
;;;

#+END_SRC

* Code
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_code
;;;
;;;

;; use python3 by default
;;(setq python-shell-interpreter "python3")
;;(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)


;; Add handlers for certain extensions
(add-to-list 'auto-mode-alist '("\\.te\\'" . m4-mode))

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;;;
;;;
;;; END_code
;;;
;;;

#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_General
;;;
;;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Brian McGillion"
      user-mail-address "brian@ssrc.tii.ae")

(use-package! vlf)

;; Store some more frequently used files in the
(set-register ?i '(file . "~/Documents/org/gtd/inbox.org"))
(set-register ?d '(file . "~/Documents/org/decrypt.org"))
(set-register ?e '(file . "~/.doom.d/config.org"))
(set-register ?l '(file . "~/Documents/org/library.bib"))

;; Improve garbage collection to 20MB of allocation to reduce time spent cleaning up
(setq gc-cons-threshold 20000000)

(global-auto-revert-mode t)

(setq projectile-project-serch-path '("~/code" "~/tools"))
;;;
;;;
;;; END_General
;;;
;;;

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Helm
;;;
;;;

;; check emacs version to stop helm hanging with tool tips, fixed in emacs 27
(if (< emacs-major-version 27)
     (setq x-wait-for-event-timeout nil))

(use-package! helm
  :init
  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  (map! :map helm-map
        "<left>" #'helm-previous-source
        "<right>" #'helm-next-source)
  (map! :leader
        "r" #'helm-recentf)
  (map! :map minibuffer-local-map
        "C-c C-l" #'helm-minibuffer-history)
  (map! :map isearch-mode-map
        "C-o" #'helm-occur-from-isearch)
  (map! :map shell-mode-map
        "C-c C-l" #'helm-comint-input-ring)
  (map! [remap switch-to-buffer] #'helm-mini)
  (map! [remap occur] #'helm-occur)
  (setq helm-google-suggest-use-curl-p        t
        helm-split-window-inside-p            t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)
  :hook (eshell-mode . (lambda ()
                         (substitute-key-definition 'eshell-list-history 'helm-eshell-history eshell-mode-map))))

(use-package! helm-config)
(use-package! helm-ag)

(helm-mode 1)
(helm-projectile-on)

;; recent changes to helm have removed the left and right arrow keys
;; returning to that functionality
;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
;; for helm-find-files
(customize-set-variable 'helm-ff-lynx-style-map t)
;; for helm-imenu
(customize-set-variable 'helm-imenu-lynx-style-map t)
;; for semantic
(customize-set-variable 'helm-semantic-lynx-style-map t)
;; for helm-occur
(customize-set-variable 'helm-occur-use-ioccur-style-keys t)
;; for helm-grep
(customize-set-variable 'helm-grep-use-ioccur-style-keys t)

;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG
;;;
;;;

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/org/")

(setq org-ellipsis " ▾ ")

;;;
;;;
;;; END_ORG
;;;
;;;

#+END_SRC

* Prelude
- Items taken from the prelude configuration

* Literature
- Add google-translate ???

#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_literature
;;;
;;;

(setq reftex-default-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib"))

(use-package! helm-bibtex
  :no-require t ;; Want to use eval-after-load style functionality so do not load at compile time
  :config
  (setq bibtex-completion-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib")
        bibtex-completion-library-path "~/Documents/Papers/"
        bibtex-completion-notes-path "~/Documents/org/roam/" ;; Using a directory enables a note per document
        bibtex-completion-notes-extension ".org"
        bibtex-completion-additional-search-fields '(journal) ;; TODO should extend this with a list of the fields that are of interest
        bibtex-completion-pdf-field "file");; This tell bibtex-completion to look at the File field of the bibtex to figure out which pdf to open


  (setq bibtex-completion-notes-template-multiple-files
       "#+TITLE: Notes on: ${author-or-editor} (${year}) (${=key=}): ${title}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :NOTER_DOCUMENT: /${file}\n  :NOTER_PAGE:\n  :END:\n\n")


  (setq bibtex-completion-notes-template-one-file
        "\n** ${author} (${year}): ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :NOTER_DOCUMENT: ${file}\n  :END:\n\n")


  ;; Override the bibtex complete function to add parsing of the file name and removing the : :pdf parts of the string
  (defun bibtex-completion-apa-get-value (field entry &optional default)
  "Return FIELD or ENTRY formatted following the APA
guidelines.  Return DEFAULT if FIELD is not present in ENTRY."
  ;; Virtual fields:
  (cond
    ((string= field "author-or-editor")
     (let ((value (bibtex-completion-get-value "author" entry)))
       (if value
           (bibtex-completion-apa-format-authors value)
         (bibtex-completion-apa-format-editors
          (bibtex-completion-get-value "editor" entry)))))
    ((string= field "author-abbrev")
     (let ((value (bibtex-completion-get-value "author" entry)))
       (bibtex-completion-apa-format-authors-abbrev value)))
    (t
     ;; Real fields:
     (let ((value (bibtex-completion-get-value field entry)))
       (if value
           (pcase field
             ;; https://owl.english.purdue.edu/owl/resource/560/06/
             ("author" (bibtex-completion-apa-format-authors value))
             ("editor" (bibtex-completion-apa-format-editors value))
             ;; When referring to books, chapters, articles, or Web pages,
             ;; capitalize only the first letter of the first word of a
             ;; title and subtitle, the first word after a colon or a dash
             ;; in the title, and proper nouns. Do not capitalize the first
             ;; letter of the second word in a hyphenated compound word.
             ("title" (replace-regexp-in-string ; remove braces
                       "[{}]"
                       ""
                       (replace-regexp-in-string ; remove macros
                        "\\\\[[:alpha:]]+{"
                        ""
                        (replace-regexp-in-string ; upcase initial letter
                         "^[[:alpha:]]"
                         'upcase
                         (replace-regexp-in-string ; preserve stuff in braces from being downcased
                          "\\(^[^{]*{\\)\\|\\(}[^{]*{\\)\\|\\(}.*$\\)\\|\\(^[^{}]*$\\)"
                          (lambda (x) (downcase (s-replace "\\" "\\\\" x)))
                          value)))))
             ("booktitle" value)
             ;; Maintain the punctuation and capitalization that is used by
             ;; the journal in its title.
             ("pages" (s-join "–" (s-split "[^0-9]+" value t)))
             ("doi" (s-concat " http://dx.doi.org/" value))
             ("year" (or value
                         (car (split-string (bibtex-completion-get-value "date" entry "") "-"))))
             ("file" (nth 1 (s-split ":" value)))
             (_ value))
         ""))))))

(use-package! org-ref
  :after (org helm-bibtex)
  :init
  (setq org-ref-open-pdf-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-bibliography-notes "~/Documents/org/roam"
        org-ref-default-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib")
        org-ref-pdf-directory "~/Documents/Papers"))

;; org-noter
(use-package! org-noter
  :ensure t
  :config
  (setq org-noter-auto-save-last-location t
        org-noter-notes-search-path '("~/Documents/org/roam/")
        org-noter-separate-notes-from-heading t))

;;;
;;;
;;; END_Literature
;;;
;;;

#+END_SRC

* RSS
- Setup elfeed to read RSS and Atom feeds

#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_RSS
;;;
;;;
(use-package! elfeed-goodies)

(setq elfeed-db-directory "~/Documents/org/elfeed_db")
;;;
;;;
;;; END_RSS
;;;
;;;

#+END_SRC
