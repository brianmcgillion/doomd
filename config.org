;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
* Code
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_code
;;;
;;;

;; use python3 by default
(setq python-shell-interpreter "python3")
(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)


;; Add handlers for certain extensions
(add-to-list 'auto-mode-alist '("\\.te\\'" . m4-mode))

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;;;
;;;
;;; END_code
;;;
;;;

#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_General
;;;
;;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Brian McGillion"
      user-mail-address "brian@ssrc.tii.ae")

(package-initialize)
(use-package! super-save
  :ensure t
  :config
  ;;(setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil)
  (setq super-save-exclude '(".gpg"))
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))


(use-package! vlf)
(use-package! crux)
(use-package! imenu-anywhere)


;; Store some more frequently used files in the
(set-register ?b '(file . "~/.emacs.d/modules/config/default/+emacs-bindings.el"))
(set-register ?d '(file . "~/Documents/org/decrypt.org"))
(set-register ?e '(file . "~/.doom.d/config.org"))
(set-register ?i '(file . "~/Documents/org/gtd/inbox.org"))
(set-register ?l '(file . "~/Documents/org/library.bib"))

(global-auto-revert-mode t)

;;(setq projectile-project-serch-path '("~/code" "~/tools"))


(defadvice server-visit-files (before parse-numbers-in-lines (files proc &optional nowait) activate)
  "Open file with emacsclient with cursors positioned on requested line.
Most of console-based utilities prints filename in format
'filename:linenumber'.  So you may wish to open filename in that format.
Just call:

  emacsclient filename:linenumber

and file 'filename' will be opened and cursor set on line 'linenumber'"
  (ad-set-arg 0
              (mapcar (lambda (fn)
                        (let ((name (car fn)))
                          (if (string-match "^\\(.*?\\):\\([0-9]+\\)\\(?::\\([0-9]+\\)\\)?$" name)
                              (cons
                               (match-string 1 name)
                               (cons (string-to-number (match-string 2 name))
                                     (string-to-number (or (match-string 3 name) ""))))
                            fn))) files)))


;;;
;;;
;;; END_General
;;;
;;;

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Helm
;;;
;;;

;; check emacs version to stop helm hanging with tool tips, fixed in emacs 27
(if (< emacs-major-version 27)
     (setq x-wait-for-event-timeout nil))

(use-package! helm
  :init
  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  (map! :map helm-map
        "<left>" #'helm-previous-source
        "<right>" #'helm-next-source)
  :config
  (setq helm-google-suggest-use-curl-p        t
        helm-split-window-inside-p            t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)
  :hook (eshell-mode . (lambda ()
                         (substitute-key-definition 'eshell-list-history 'helm-eshell-history eshell-mode-map))))

(use-package! helm-config)
;;(use-package! helm-ag)

helm-mode 1
(after! projectile
  (helm-projectile-on))

;; recent changes to helm have removed the left and right arrow keys
;; returning to that functionality
;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
;; for helm-find-files
(customize-set-variable 'helm-ff-lynx-style-map t)
;; for helm-imenu
(customize-set-variable 'helm-imenu-lynx-style-map t)
;; for semantic
(customize-set-variable 'helm-semantic-lynx-style-map t)
;; for helm-occur
(customize-set-variable 'helm-occur-use-ioccur-style-keys t)
;; for helm-grep
(customize-set-variable 'helm-grep-use-ioccur-style-keys t)

;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Interface_Tweaks
;;;
;;;

;; When starting a new frame make it maximized
(add-to-list 'initial-frame-alist '(fullscreen . fullboth))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

(setq +doom-dashboard-menu-sections
  '(("Open org-agenda"
     :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
     :action bmg/switch-to-agenda)
    ("Recently opened files"
     :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
     :action recentf-open-files)
    ("Open project"
     :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
     :action projectile-switch-project)
    ("RSS"
     :icon (all-the-icons-octicon "rss" :face 'font-lock-keyword-face)
     :action =rss)
    ("IRC"
     :icon (all-the-icons-faicon "comments" :face 'font-lock-keyword-face)
     :action =irc)
    ("Open private configuration"
     :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
     :when (file-directory-p doom-private-dir)
     :action doom/open-private-config)
    ("Open documentation"
     :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
     :action doom/help)
    ;; ("Email"
    ;;  :icon (all-the-icons-octicon "mail" :face 'font-lock-keyword-face)
    ;;  :action =mu4e)
    ;; ("Jump to bookmark"
    ;;  :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
    ;;  :action bookmark-jump)
    ;; ("Notes"
    ;;  :icon (all-the-icons-octicon "light-bulb" :face 'font-lock-keyword-face)
    ;;  :action ragone-deft-or-close)
    ;; ("Passwords"
    ;;  :icon (all-the-icons-octicon "lock" :face 'font-lock-keyword-face)
    ;;  :action pass)
    ;; ("IRC"
    ;;  :icon (all-the-icons-faicon "comments" :face 'font-lock-keyword-face)
    ;;  :action =irc)))
    ))
;;;
;;;
;;; END_Interface_Tweaks
;;;
;;;

#+END_SRC
* IRC
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_Knowledge
;;;
;;;

(after! circe
  (set-irc-server! "chat.freenode.net"
    `(:tls t
      :port 6697
      :nick "bmg"
      :sasl-username ,(+pass-get-user "irc/freenode.net")
      :sasl-password (lambda (&rest _) (+pass-get-secret "irc/freenode.net"))
      :channels ("#emacs" "#opentee"))))
  ;; (set-irc-server! "chat.freenode.net"
  ;;   `(:tls t
  ;;     :port 6697
  ;;     :nick "pirut"
  ;;     :sasl-username ,(+pass-get-user "irc/freenode2.net")
  ;;     :sasl-password (lambda (&rest _) (+pass-get-secret "irc/freenode2.net"))
  ;;     :channels ("#emacs" "#opentee"))))

;;;
;;;
;;; END_IRC
;;;
;;;

#+END_SRC
* Map
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Map
;;;
;;;

(map! "C--"     #'undo-fu-only-undo
      "C-+"     #'undo-fu-only-redo

      (:after org-roam
        :leader
        (:prefix-map ("z" . "roam")
          :desc "Org roam"                "l" #'org-roam
          :desc "Org roam insert"         "i" #'org-roam-insert
          :desc "Org roam switch buffer"  "b" #'org-roam-switch-to-buffer
          :desc "Org roam find file"      "f" #'org-roam-find-file
          :desc "Org roam show graph"     "g" #'org-roam-show-graph
          :desc "Org roam capture"        "c" #'org-roam-capture))

      (:after org-agenda
        "<f4>" #'org-agenda

        (:leader
        ;;; <leader> n --- notes
          (:prefix-map ("n" . "notes")
            :desc "Org agenda"  "a" #'bmg/switch-to-agenda))

        (:map org-agenda-mode-map
          "i"                       #'org-agenda-clock-in
          "r"                       #'bmg/org-process-inbox
          "R"                       #'org-agenda-refile
          "c"                       #'bmg/org-inbox-capture))

      (:after helm
        [remap switch-to-buffer]    #'helm-mini
        [remap occur]               #'helm-occur

        (:leader                    ;; Top level C-c
          "r"                       #'helm-recentf)
        (:map minibuffer-local-map
          "C-c C-l"                 #'helm-minibuffer-history)
        (:map isearch-mode-map
          "C-o"                     #'helm-occur-from-isearch)
        (:map shell-mode-map
          "C-c C-l"                 #'helm-comint-input-ring))

      (:after crux
        :leader
   ;;; <leader> b --- prelude
        (:prefix-map ("b" . "prelude")
          :desc "crux-open-with"                         "o" #'crux-open-with
          :desc "crux-move-beginning-of-line"            "a" #'crux-move-beginning-of-line
          :desc "crux-cleanup-buffer-or-region"          "n" #'crux-cleanup-buffer-or-region
          :desc "crux-indent-defun"                      "TAB" #''crux-indent-defun
          :desc "crux-view-url"                          "u" #'crux-view-url
          :desc "crux-swap-windows"                      "s" #'crux-swap-windows
          :desc "crux-delete-file-and-buffer"            "D" #'crux-delete-file-and-buffer
          :desc "crux-duplicate-current-line-or-region"  "d" #'crux-duplicate-current-line-or-region
          :desc "crux-rename-buffer-and-file"            "r" #'crux-rename-buffer-and-file
          :desc "crux-kill-other-buffers"                "k" #'crux-kill-other-buffers
          :desc "imenu-anywhere"                         "i" #'imenu-anywhere))
) ;; END MAP


;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG
;;;
;;;

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/org/"
      org-ellipsis " ▾ "
      org-startup-folded t
      org-src-fontify-natively t)

;;;
;;;
;;; END_ORG
;;;
;;;

#+END_SRC

** Org GTD
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_GTD
;;;
;;;

(setq bmg/org-agenda-directory (concat org-directory "/gtd/"))
(setq org-archive-location (concat org-directory "/archive.org_archive::datetree/"))

(after! org-agenda
  (require 'find-lisp)
  (setq org-agenda-files (find-lisp-find-files "~/Documents/org/gtd/" "\.org$"))
  (add-to-list 'org-agenda-custom-commands
               `("r" "Reading" todo ""
                 ((org-agenda-files '(,(concat bmg/org-agenda-directory "reading.org")))))))


(after! org
  (setq org-default-notes-file (expand-file-name "inbox.org" bmg/org-agenda-directory))
  (setq +org-capture-todo-file org-default-notes-file
        +org-capture-notes-file org-default-notes-file
        +org-capture-projects-file org-default-notes-file)

  (setq org-log-done 'time
        org-log-into-drawer t
        org-log-state-notes-insert-after-drawers nil)

  (setq org-tag-alist (quote (("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?h)
                              (:newline)
                              ("WAITING" . ?w)
                              ("HOLD" . ?H)
                              ("CANCELLED" . ?c))))
  ;; Capture templates
  (add-to-list 'org-capture-templates
               `("i" "inbox" entry (file org-default-notes-file)
                 "* TODO %?"))

  (add-to-list 'org-capture-templates
               `("h" "Protocol hl" entry (file org-default-notes-file)
                 "* TODO %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?\n\n" :immediate-finish t))

  (add-to-list 'org-capture-templates
               `("L" "Protocol Link" entry (file org-default-notes-file)
                 "* TODO %? [[%:link][%:description]] \nCaptured On: %U\n\n" :immediate-finish t))

  ;;- TODO Check how to over ride e.g. +org-capture-{notes,journal,todo}-file
  )

(after! org-refile
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-targets '(("next.org" :level . 0)
                             ("someday.org" :level . 0)
                             ("reading.org" :level . 1)
                             ("projects.org" :maxlevel . 1))))

;;;
;;; Functions for managing the org-agenda ala Jethro
;;;
(defvar bmg/org-agenda-bulk-process-key ?f
  "Default key for bulk processing inbox items.")

(defun bmg/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "inbox:")
  (bmg/bulk-process-entries))

(defvar bmg/org-current-effort "1:00" "Current effort for agenda items.")

(defun bmg/my-org-agenda-set-effort (effort)
  "Set the effort property for the current headline."
  (interactive
   (list (read-string (format "Effort [%s]: " bmg/org-current-effort) nil nil bmg/org-current-effort)))
  (setq bmg/org-current-effort effort)
  (org-agenda-check-no-diary)
  (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                       (org-agenda-error)))
         (buffer (marker-buffer hdmarker))
         (pos (marker-position hdmarker))
         (inhibit-read-only t)
         newhead)
    (org-with-remote-undo buffer
      (with-current-buffer buffer
        (widen)
        (goto-char pos)
        (org-show-context 'agenda)
        (funcall-interactively 'org-set-effort nil bmg/org-current-effort)
        (end-of-line 1)
        (setq newhead (org-get-heading)))
      (org-agenda-change-all-lines newhead hdmarker))))

(defun bmg/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (call-interactively 'bmg/my-org-agenda-set-effort)
   (org-agenda-refile nil nil t)))

(defun bmg/bulk-process-entries ()
  (if (not (null org-agenda-bulk-marked-entries))
      (let ((entries (reverse org-agenda-bulk-marked-entries))
            (processed 0)
            (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region) (funcall 'bmg/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)")))))

(defun bmg/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(setq org-agenda-bulk-custom-functions `((,bmg/org-agenda-bulk-process-key bmg/org-agenda-process-inbox-item)))

(defun bmg/set-todo-state-next ()
  "Visit each parent task and change NEXT states to TODO"
  (org-todo "STRT"))

(add-hook 'org-clock-in-hook 'bmg/set-todo-state-next 'append)

(use-package! org-clock-convenience
  :bind (:map org-agenda-mode-map
              ("<S-up>" . org-clock-convenience-timestamp-up)
              ("<S-down>" . org-clock-convenience-timestamp-down)
              ("o" . org-clock-convenience-fill-gap)
              ("e" . org-clock-convenience-fill-gap-both)))

(use-package! org-agenda
  :init
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t)
  (defun bmg/switch-to-agenda ()
    (interactive)
    (org-agenda nil " "))
  :config
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands `((" " "Agenda"
                                      ((agenda ""
                                               ((org-agenda-span 'week)
                                                (org-deadline-warning-days 365)))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "To Refile")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "inbox.org")))))
                                       (todo "STRT"
                                             ((org-agenda-overriding-header "In Progress")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "someday.org")
                                                                  ,(concat bmg/org-agenda-directory "projects.org")
                                                                  ,(concat bmg/org-agenda-directory "next.org")
                                                                  ,(concat bmg/org-agenda-directory "reading.org")))))
                                        (todo "TODO"
                                              ((org-agenda-overriding-header "Reading")
                                               (org-agenda-files '(,(concat bmg/org-agenda-directory "reading.org")))))
                                        (todo "TODO"
                                              ((org-agenda-overriding-header "Projects")
                                               (org-agenda-files '(,(concat bmg/org-agenda-directory "projects.org")))))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "One-off Tasks")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "next.org")
                                                                  ,(concat bmg/org-agenda-directory "someday.org")))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled)))))))))

;;;
;;;
;;; END_ORG_GTD
;;;
;;;

#+END_SRC

** Org Roam and Knowledgebase
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_Knowledge
;;;
;;;

(after! org-journal
  (setq org-journal-dir (expand-file-name "/roam/" org-directory)
        org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y"))


(use-package! org-roam ;; https://org-roam.readthedocs.io/en/develop/configuration/
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :init
  (setq org-roam-directory (expand-file-name "~/Documents/org/roam/")
        org-roam-link-title-format "R:%s" ;;Distinguish internal Roam links from external links
        org-roam-graphviz-executable "/usr/bin/dot" ;; Visualize the relationships with notes
        org-roam-completion-system 'helm) ;; use helm completion for org-roam
  :config
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+TITLE: ${title}

- tags :: "
           :unnarrowed t))))

(use-package! company-org-roam
  :when (featurep! :completion company)
  :after org-roam
  :config
  (set-company-backend! 'org-mode '(company-org-roam)))

;;;
;;;
;;; END_ORG_Knowledge
;;;
;;;

#+END_SRC

* Literature
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_literature
;;;
;;;

(setq reftex-default-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib"))

(use-package! helm-bibtex
  ;;:no-require t ;; Want to use eval-after-load style functionality so do not load at compile time
  :config
  (setq bibtex-completion-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib")
        bibtex-completion-library-path "~/Documents/Papers"
        bibtex-completion-notes-path "~/Documents/org/roam/" ;; Using a directory enables a note per document
        bibtex-completion-notes-extension ".org"
        bibtex-completion-additional-search-fields '(keywords) ;; TODO should extend this with a list of the fields that are of interest
        bibtex-completion-pdf-field "file");; This tell bibtex-completion to look at the File field of the bibtex to figure out which pdf to open


  (setq bibtex-completion-notes-template-multiple-files
       "${title} : (${=key=})
#+ROAM_KEY: cite:${=key=}

- tags ::
- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: /${file}\n  :NOTER_PAGE: \n  :END:\n\n")


  (setq bibtex-completion-notes-template-one-file
        "\n** ${author} (${year}): ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :NOTER_DOCUMENT: /${file}\n  :END:\n\n")


  ;; Override the bibtex complete function to add parsing of the file name and removing the : :pdf parts of the string
  (defun bibtex-completion-apa-get-value (field entry &optional default)
  "Return FIELD or ENTRY formatted following the APA
guidelines.  Return DEFAULT if FIELD is not present in ENTRY."
  ;; Virtual fields:
  (cond
    ((string= field "author-or-editor")
     (let ((value (bibtex-completion-get-value "author" entry)))
       (if value
           (bibtex-completion-apa-format-authors value)
         (bibtex-completion-apa-format-editors
          (bibtex-completion-get-value "editor" entry)))))
    ((string= field "author-abbrev")
     (let ((value (bibtex-completion-get-value "author" entry)))
       (bibtex-completion-apa-format-authors-abbrev value)))
    (t
     ;; Real fields:
     (let ((value (bibtex-completion-get-value field entry)))
       (if value
           (pcase field
             ;; https://owl.english.purdue.edu/owl/resource/560/06/
             ("author" (bibtex-completion-apa-format-authors value))
             ("editor" (bibtex-completion-apa-format-editors value))
             ;; When referring to books, chapters, articles, or Web pages,
             ;; capitalize only the first letter of the first word of a
             ;; title and subtitle, the first word after a colon or a dash
             ;; in the title, and proper nouns. Do not capitalize the first
             ;; letter of the second word in a hyphenated compound word.
             ("title" (replace-regexp-in-string ; remove braces
                       "[{}]"
                       ""
                       (replace-regexp-in-string ; remove macros
                        "\\\\[[:alpha:]]+{"
                        ""
                        (replace-regexp-in-string ; upcase initial letter
                         "^[[:alpha:]]"
                         'upcase
                         (replace-regexp-in-string ; preserve stuff in braces from being downcased
                          "\\(^[^{]*{\\)\\|\\(}[^{]*{\\)\\|\\(}.*$\\)\\|\\(^[^{}]*$\\)"
                          (lambda (x) (downcase (s-replace "\\" "\\\\" x)))
                          value)))))
             ("booktitle" value)
             ;; Maintain the punctuation and capitalization that is used by
             ;; the journal in its title.
             ("pages" (s-join "–" (s-split "[^0-9]+" value t)))
             ("doi" (s-concat " http://dx.doi.org/" value))
             ("year" (or value
                         (car (split-string (bibtex-completion-get-value "date" entry "") "-"))))
             ("file" (nth 1 (s-split ":" value)))
             (_ value))
         ""))))))

(use-package! org-ref
  :after (org helm-bibtex)
  :init
  (setq org-ref-open-pdf-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-bibliography-notes "~/Documents/org/roam"
        org-ref-default-bibliography '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib")
        org-ref-pdf-directory "~/Documents/Papers"))

;; org-noter
(use-package! org-noter
  :after (org)
  :config
  (setq org-noter-auto-save-last-location t
        org-noter-notes-search-path '("~/Documents/org/roam/")
        org-noter-separate-notes-from-heading t))

;;;
;;;
;;; END_Literature
;;;
;;;

#+END_SRC
* Repos
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_REPOS
;;;
;;;

;; Enable the debugger when needed
;;(setq debug-on-error t)

;;;
;;;
;;; END_REPOS
;;;
;;;
#+END_SRC
* RSS

#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_RSS
;;;
;;;

(use-package! elfeed-goodies)

;;;
;;;
;;; END_RSS
;;;
;;;

#+END_SRC
