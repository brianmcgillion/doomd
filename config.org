;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
* Code
:PROPERTIES:
:ID:       4460f37d-9944-4717-acf5-e2ab1e410787
:END:
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_code
;;;
;;;

;; use python3 by default
(setq python-shell-interpreter "python3")
(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)


;; Add handlers SELinux files
(add-to-list 'auto-mode-alist '("\\.te\\'" . m4-mode))

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)


(setq c-default-style "linux") ;; set style to "linux"

(use-package x86-lookup
  :defer t
  :config
  (setq  x86-lookup-pdf "~/Documents/Papers/Intel_64_and_IA-32_Architecture_Software_Developer_Manual.pdf"))

(use-package nasm-mode
  :defer t
  :config
  (add-hook 'asm-mode-hook 'nasm-mode))

(add-to-list 'auto-mode-alist '("\\.nasm\\'" . nasm-mode))

;; (after! lsp-mode
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "mspyls")
;;                     :major-modes '(python-mode)
;;                     :remote? t
;;                     :server-id 'mspyls-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection "/usr/local/bin/bash-language-server")
;;                     :major-modes '(sh-mode)
;;                     :remote? t
;;                     :server-id 'bash-remote))
;;   (lsp-register-client
;;    (make-lsp-client :new-connection (lsp-tramp-connection 'lsp-clients--clangd-command)
;;                     :major-modes '(c++-mode c-mode cc-mode)
;;                     :remote? t
;;                     :server-id 'clangd-remote)))

;; (after! lsp
;;   (setq lsp-lens-enable t
;;         lsp-headerline-breadcrumb-enable t
;;         lsp-modeline-code-actions-enable t
;;         lsp-diagnostics-provider :auto
;;         lsp-modeline-diagnostics-enable t
;;         lsp-signature-auto-activate t
;;         lsp-signature-render-documentation t
;;         lsp-completion-show-detail t
;;         lsp-completion-show-kind t))

;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-code-actions t
;;         lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-diagnostics t))

;;;
;;;
;;; END_code
;;;
;;;
#+END_SRC
* Connections
:PROPERTIES:
:ID:       7018c3c5-ffc5-4b4d-a2cc-ae70796fd448
:END:
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_connection
;;;
;;;

;; (after! tramp
;;   (setenv "SHELL" "/bin/bash")
;;   (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) ;; defult + 

;; When connecting over tramp it takes a long time processing projectile
(defadvice projectile-project-root (around ignore-remote first activate)
  (unless (file-remote-p default-directory) ad-do-it))
;;;
;;;
;;; END_connection
;;;
;;;
#+END_SRC
* General
:PROPERTIES:
:ID:       5fa6e40a-6235-4da7-9c35-3df39775a7af
:END:

#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_General
;;;
;;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Brian McGillion"
      user-mail-address "brian@ssrc.tii.ae")

;; TODO see if this is too much and maybe only leave it for C
;; enable word-wrap (almost) everywhere
(+global-word-wrap-mode +1)

;; Autosave files when switching buffers
(use-package! super-save
  :defer t
  :config
  (setq auto-save-default nil)
  (setq super-save-exclude '(".gpg"))
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))

(use-package! elfeed-goodies
  :after elfeed)
(use-package! crux
  :defer t)
(use-package! imenu-anywhere
  :defer t)

(setq uniquify-buffer-name-style 'forward)
(setq which-key-idle-delay 0.5)

;; Stop undo-tree storing persistent history
(after! undo-tree
  (setq undo-tree-auto-save-history nil))

;; Use a custom dictionary on linux
(if IS-MAC (setq ispell-dictionary "en_GB"))
;;  (setq ispell-dictionary "en-custom"))

(set-language-environment-charset "UTF-8")

;; Configure language-tool for checkers/grammar
(setq langtool-language-tool-jar "~/tools/languagetool/languagetool-commandline.jar")

;; If a file changes on disk update the buffer to match
(global-auto-revert-mode t)

;; use browse-url with gist
(setq gist-view-gist t)

;; hopefully projectile auto finds the projects
(setq projectile-project-search-path '(("~/.dotfiles" . 5)("~/projects" . 5)))

;;;
;;;
;;; END_General
;;;
;;;
#+END_SRC

* Helm
:PROPERTIES:
:ID:       6b424a31-028d-4f08-9514-32185b39f914
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Helm
;;;
;;;

(use-package! helm
  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  :bind (:map helm-map ;; Seems that it needs to be done in init
          ("<left>" . #'helm-previous-source)
          ("<right>" . #'helm-next-source)))

(after! helm
  (setq helm-google-suggest-use-curl-p        t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  ;; for helm-find-files
  (customize-set-variable 'helm-ff-lynx-style-map t)
  ;; for helm-imenu
  (customize-set-variable 'helm-imenu-lynx-style-map t)
  ;; for semantic
  (customize-set-variable 'helm-semantic-lynx-style-map t)
  ;; for helm-occur
  (customize-set-variable 'helm-occur-use-ioccur-style-keys t)
  ;; for helm-grep
  (customize-set-variable 'helm-grep-use-ioccur-style-keys t)

  ;; helm-rg can be limited by helm-candidate-number-limit which is set to
  ;; 50 in doom, so increase that, but cap it at 5000 just not to crash emacs
  ;; when there is a massive amount of returns
  (defadvice! +helm--increase-limit-for-helm-rg-a (orig-fn &rest args)
    :around #'helm-rg
    (let ((helm-candidate-number-limit 5000)) ;; can try replace 5000 for nil if needed
      (apply orig-fn args)))
)

;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Interface Tweaks
:PROPERTIES:
:ID:       7d3f0a7b-101c-44cd-920c-65a82bc21877
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Interface_Tweaks
;;;
;;;

;; When starting a new frame make it maximized
(add-to-list 'initial-frame-alist '(fullscreen . fullboth))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; Configure treemacs theme and git highlighting
(setq doom-themes-treemacs-theme "doom-colors")
(setq +treemacs-git-mode 'deferred)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Blinking cursors are annoying
(blink-cursor-mode -1)


;; (after! pdf-tools
;;   ;; automatically turns on midnight-mode for
;;   (add-hook 'pdf-view-mode-hook (lambda ()
;;                                   (pdf-view-midnight-minor-mode))))

(setq +doom-dashboard-menu-sections
  '(("Open org-agenda"
     :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
     :action bmg/switch-to-agenda)
    ("Recently opened files"
     :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
     :action recentf-open-files)
    ("Open project"
     :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
     :action projectile-switch-project)
    ("RSS"
     :icon (all-the-icons-octicon "rss" :face 'font-lock-keyword-face)
     :action =rss)
    ("Open private configuration"
     :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
     :when (file-directory-p doom-private-dir)
     :action doom/open-private-config)
    ("Open documentation"
     :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
     :action doom/help)
    ;; ("Passwords"
    ;;  :icon (all-the-icons-octicon "lock" :face 'font-lock-keyword-face)
    ;;  :action pass)

    ))

;;;
;;;
;;; END_Interface_Tweaks
;;;
;;;

#+END_SRC
* Map
:PROPERTIES:
:ID:       629b4ae3-039b-4729-b3f6-1ae18ed50d13
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Map
;;;
;;;

(map! "C--"     #'undo-fu-only-undo
      "C-+"     #'undo-fu-only-redo

      (;;:org-roam
       :leader
       (:prefix-map ("z" . "org-roam")
        "c" #'org-roam-capture
        "D" #'org-roam-demote-entire-buffer
        "f" #'org-roam-node-find
        "F" #'org-roam-ref-find
        "g" #'org-roam-graph
        "i" #'org-roam-node-insert
        "I" #'org-id-get-create
        "t" #'org-roam-buffer-toggle
        "T" #'org-roam-buffer-display-dedicated
        "r" #'org-roam-refile
        "R" #'org-roam-link-replace-all
        (:prefix ("d" . "by date")
         :desc "Goto previous note" "b" #'org-roam-dailies-goto-previous-note
         :desc "Goto date"          "d" #'org-roam-dailies-goto-date
         :desc "Capture date"       "D" #'org-roam-dailies-capture-date
         :desc "Goto next note"     "f" #'org-roam-dailies-goto-next-note
         :desc "Goto tomorrow"      "m" #'org-roam-dailies-goto-tomorrow
         :desc "Capture tomorrow"   "M" #'org-roam-dailies-capture-tomorrow
         :desc "Capture today"      "n" #'org-roam-dailies-capture-today
         :desc "Goto today"         "t" #'org-roam-dailies-goto-today
         :desc "Capture today"      "T" #'org-roam-dailies-capture-today
         :desc "Goto yesterday"     "y" #'org-roam-dailies-goto-yesterday
         :desc "Capture yesterday"  "Y" #'org-roam-dailies-capture-yesterday
         :desc "Find directory"     "-" #'org-roam-dailies-find-directory)
        (:prefix ("n" . "node properties")
         "a" #'org-roam-alias-add
         "A" #'org-roam-alias-remove
         "t" #'org-roam-tag-add
         "T" #'org-roam-tag-remove
         "r" #'org-roam-ref-add
         "R" #'org-roam-ref-remove)))

      (;;:org-agenda
  ;;     "<f4>" #'org-agenda

       (:leader
        ;;; <leader> n --- notes
        (:prefix-map ("n" . "notes")
         :desc "Org agenda"  "a" #'bmg/switch-to-agenda))

       (:map org-agenda-mode-map
        "i"                       #'org-agenda-clock-in
        "r"                       #'bmg/org-process-inbox
        "R"                       #'org-agenda-refile
        "c"                       #'bmg/org-inbox-capture))

      (;;:helm
       [remap occur]               #'helm-occur

       (:map minibuffer-local-map
        "C-c C-l"                 #'helm-minibuffer-history)
       (:map isearch-mode-map
        "C-o"                     #'helm-occur-from-isearch)
       (:map shell-mode-map
        "C-c C-l"                 #'helm-comint-input-ring))

      (;;: crux and stuff
       (:leader
        ;;;  <leader> b --- prelude
        (:prefix-map ("b" . "prelude")
         :desc "crux-cleanup-buffer-or-region"          "c" #'crux-cleanup-buffer-or-region
         :desc "crux-duplicate-current-line-or-region"  "d" #'crux-duplicate-current-line-or-region
         :desc "crux-delete-file-and-buffer"            "D" #'crux-delete-file-and-buffer
         :desc "helm-imenu"                             "i" #'helm-imenu
         :desc "crux-kill-other-buffers"                "k" #'crux-kill-other-buffers
         :desc "crux-open-with"                         "o" #'crux-open-with
         :desc "crux-rename-buffer-and-file"            "r" #'crux-rename-buffer-and-file
         :desc "crux-transpose-windows"                 "s" #'crux-transpose-windows
         :desc "treemacs-select-window"                 "t" #'treemacs-select-window
         :desc "crux-view-url"                          "u" #'crux-view-url
         :desc "helm-imenu-anywhere"                    "y" #'helm-imenu-anywhere
         :desc "crux-indent-defun"                      "TAB" #'crux-indent-defun)))
      ) ;; END MAP

;;;
;;;
;;; END_MAP
;;;
;;;
#+END_SRC
* Org
:PROPERTIES:
:ID:       b889f253-3691-41e3-a2ca-7f1c76f10d7d
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG
;;;
;;;

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq! org-directory "~/Documents/org/"
       org-ellipsis " ▾ "
       org-startup-folded t
       org-src-fontify-natively t)

(defvar my-roam-dir (concat org-directory "roam/"))

(setq! org-noter-notes-search-path my-roam-dir)

(setq! bibtex-completion-bibliography (concat org-directory "emacs_lit.bib")
       bibtex-completion-library-path '("~/Documents/Papers/")
       bibtex-completion-notes-path my-roam-dir)

;; For org-ref and helm-bibtex
(setq bibtex-dialect 'biblatex)
;;(setq bibtex-dialect 'BibTeX)

;; TODO Why can I not use add-to-list for this
(setq org-roam-capture-templates
      '(("d" "default" plain
         "%?"
         :if-new (file+head "${slug}.org"
                            "#+title: ${title}\n#+created: %u\n#+last_modified: %U\n\n - related :: ")
         :unnarrowed t)))

(after! org-roam
  (setq org-roam-directory (file-truename my-roam-dir)
        org-roam-link-title-format "R:%s" ;;Distinguish internal Roam links from external links
        +org-roam-open-buffer-on-find-file nil
        org-roam-completion-everywhere nil
        org-id-link-to-org-use-id t
        org-roam-extract-new-file-path "${slug}.org"
        org-roam-database-connector 'sqlite3)

  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n#+roam_key: ${ref}\n#+created: %u\n#+last_modified: %U\n\n - related :: ")
           :unnarrowed t)))
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n")))))

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :commands (org-roam-ui-mode))

(use-package! org-roam-bibtex
   :when (featurep! :lang org +roam2)
   :after org-roam
   :preface
   ;; if the user has not set a template mechanism set a reasonable one of them
   ;; The package already tests for nil itself so we define a dummy tester
   (defvar orb-preformat-keywords
     '("title" "url" "file" "author-or-editor" "keywords" "citekey" "pdf"))
   :hook (org-roam-mode . org-roam-bibtex-mode)
   :custom
   (orb-note-actions-interface (cond ((featurep! :completion ivy)  'ivy)
                                     ((featurep! :completion helm) 'helm)
                                     ((t                           'default))))
   :config
   (setq orb-insert-interface (cond ((featurep! :completion ivy)  'ivy-bibtex)
                                    ((featurep! :completion helm) 'helm-bibtex)
                                    ((t                           'generic))))
   (setq orb-process-file-keyword t
         orb-file-field-extensions '("pdf"))

   ;; TODO remove the hard coded path, should use a concatination instead of doc..org..
   (add-to-list 'org-roam-capture-templates
                '("b" "Bibliography note" plain
                   (file "~/Documents/org/ORB_template.org")
                  :if-new (file+head "${citekey}.org" ":PROPERTIES:
 :ROAM_REFS: cite:${citekey}
 :END:
 ,#+TITLE: ${title}\n")
                  :unnarrowed t)))

;;TODO Add some more of the org-ref helpers here
;; (after! org-ref
;;   (setq bibtex-autokey-year-length 4
;;         bibtex-autokey-name-year-separator nil
;;         bibtex-autokey-year-title-separator nil
;;         bibtex-autokey-titleword-separator nil
;;         bibtex-autokey-titlewords 0
;;         bibtex-autokey-titlewords-stretch nil
;;         bibtex-autokey-titleword-length 0)
;;   (require 'doi-utils)
;;   (require 'org-ref-arxiv)
;;   (require 'org-ref-pdf)
;; )

;; Let org-ref know we are using mendeley
;;(setq org-ref-get-pdf-filename-function 'org-ref-get-mendeley-filename)

;;;
;;;
;;; END_ORG
;;;
;;;
#+END_SRC
** Org Capture
:PROPERTIES:
:ID:       bb09674e-72b6-4185-803e-a23c7cc0aa77
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_CAPTURE
;;;
;;;

(setq org-default-notes-file (expand-file-name (format "inbox-%s.org" (system-name)) my-roam-dir))
(setq +org-capture-todo-file org-default-notes-file
      +org-capture-notes-file org-default-notes-file
      +org-capture-projects-file org-default-notes-file)

(setq org-log-done 'time
      org-log-into-drawer t
      org-log-state-notes-insert-after-drawers nil)

(use-package! doct
  :after org-capture)

(after! org-capture
 (defun org-capture-select-template-prettier (&optional keys)
      "Select a capture template, in a prettier way than default
    Lisp programs can force the template by setting KEYS to a string."
      (let ((org-capture-templates
             (or (org-contextualize-keys
                  (org-capture-upgrade-templates org-capture-templates)
                  org-capture-templates-contexts)
                 '(("t" "Task" entry (file+headline "" "Tasks")
                    "* TODO %?\n  %u\n  %a")))))
        (if keys
            (or (assoc keys org-capture-templates)
                (error "No capture template referred to by \"%s\" keys" keys))
          (org-mks org-capture-templates
                   "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
                   "Template key: "
                   `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
    (advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

    (defun org-mks-pretty (table title &optional prompt specials)
      "Select a member of an alist with multiple keys. Prettified.

    TABLE is the alist which should contain entries where the car is a string.
    There should be two types of entries.

    1. prefix descriptions like (\"a\" \"Description\")
       This indicates that `a' is a prefix key for multi-letter selection, and
       that there are entries following with keys like \"ab\", \"ax\"…

    2. Select-able members must have more than two elements, with the first
       being the string of keys that lead to selecting it, and the second a
       short description string of the item.

    The command will then make a temporary buffer listing all entries
    that can be selected with a single key, and all the single key
    prefixes.  When you press the key for a single-letter entry, it is selected.
    When you press a prefix key, the commands (and maybe further prefixes)
    under this key will be shown and offered for selection.

    TITLE will be placed over the selection in the temporary buffer,
    PROMPT will be used when prompting for a key.  SPECIALS is an
    alist with (\"key\" \"description\") entries.  When one of these
    is selected, only the bare key is returned."
      (save-window-excursion
        (let ((inhibit-quit t)
              (buffer (org-switch-to-buffer-other-window "*Org Select*"))
              (prompt (or prompt "Select: "))
              case-fold-search
              current)
          (unwind-protect
              (catch 'exit
                (while t
                  (setq-local evil-normal-state-cursor (list nil))
                  (erase-buffer)
                  (insert title "\n\n")
                  (let ((des-keys nil)
                        (allowed-keys '("\C-g"))
                        (tab-alternatives '("\s" "\t" "\r"))
                        (cursor-type nil))
                    ;; Populate allowed keys and descriptions keys
                    ;; available with CURRENT selector.
                    (let ((re (format "\\`%s\\(.\\)\\'"
                                      (if current (regexp-quote current) "")))
                          (prefix (if current (concat current " ") "")))
                      (dolist (entry table)
                        (pcase entry
                          ;; Description.
                          (`(,(and key (pred (string-match re))) ,desc)
                           (let ((k (match-string 1 key)))
                             (push k des-keys)
                             ;; Keys ending in tab, space or RET are equivalent.
                             (if (member k tab-alternatives)
                                 (push "\t" allowed-keys)
                               (push k allowed-keys))
                             (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
                          ;; Usable entry.
                          (`(,(and key (pred (string-match re))) ,desc . ,_)
                           (let ((k (match-string 1 key)))
                             (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                             (push k allowed-keys)))
                          (_ nil))))
                    ;; Insert special entries, if any.
                    (when specials
                      (insert "─────────────────────────\n")
                      (pcase-dolist (`(,key ,description) specials)
                        (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                        (push key allowed-keys)))
                    ;; Display UI and let user select an entry or
                    ;; a sub-level prefix.
                    (goto-char (point-min))
                    (unless (pos-visible-in-window-p (point-max))
                      (org-fit-window-to-buffer))
                    (let ((pressed (org--mks-read-key allowed-keys
                                                      prompt
                                                      (not (pos-visible-in-window-p (1- (point-max)))))))
                      (setq current (concat current pressed))
                      (cond
                       ((equal pressed "\C-g") (user-error "Abort"))
                       ;; Selection is a prefix: open a new menu.
                       ((member pressed des-keys))
                       ;; Selection matches an association: return it.
                       ((let ((entry (assoc current table)))
                          (and entry (throw 'exit entry))))
                       ;; Selection matches a special entry: return the
                       ;; selection prefix.
                       ((assoc current specials) (throw 'exit current))
                       (t (error "No entry available")))))))
            (when buffer (kill-buffer buffer))))))
    (advice-add 'org-mks :override #'org-mks-pretty)

    (defun +doct-icon-declaration-to-icon (declaration)
      "Convert :icon declaration to icon"
      (let ((name (pop declaration))
            (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
            (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
            (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
        (apply set `(,name :face ,face :v-adjust ,v-adjust))))

    (defun +doct-iconify-capture-templates (groups)
      "Add declaration's :icon to each template group in GROUPS."
      (let ((templates (doct-flatten-lists-in groups)))
        (setq doct-templates (mapcar (lambda (template)
                                       (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                                   (spec (plist-get (plist-get props :doct) :icon)))
                                         (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                        "\t"
                                                                        (nth 1 template))))
                                       template)
                                     templates))))

    (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

  (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a")
                   )
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* %?"
                              "%i %a"))
                  ("Email" :keys "e"
                   :icon ("envelope" :set "faicon" :color "blue")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %^{type|reply to|contact} %\\3 %? :email:"
                              "Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}"
                              "about %^{topic}"
                              "%U %i %a"))
                  ("Interesting" :keys "i"
                   :icon ("eye" :set "faicon" :color "lcyan")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children (("Webpage" :keys "w"
                               :icon ("globe" :set "faicon" :color "green")
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              ("Article" :keys "a"
                               :icon ("file-text" :set "octicon" :color "yellow")
                               :desc ""
                               :i-type "read:reaserch"
                               )
                              ("Information" :keys "i"
                               :icon ("info-circle" :set "faicon" :color "blue")
                               :desc ""
                               :i-type "read:info"
                               )
                              ("Idea" :keys "I"
                               :icon ("bubble_chart" :set "material" :color "silver")
                               :desc ""
                               :i-type "idea"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))
                  ("Project" :keys "p"
                   :icon ("repo" :set "octicon" :color "silver")
                   :prepend t
                   :type entry
                   :headline "Inbox"
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :file ""
                   :custom (:time-or-todo "")
                   :children (("Project-local todo" :keys "t"
                               :icon ("checklist" :set "octicon" :color "green")
                               :time-or-todo "TODO"
                               :function +org-capture-project-todo-file)
                              ("Project-local note" :keys "n"
                               :icon ("sticky-note" :set "faicon" :color "yellow")
                               :time-or-todo "%U"
                               :file +org-capture-project-notes-file)
                              ("Project-local changelog" :keys "c"
                               :icon ("list" :set "faicon" :color "blue")
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-project-changelog-file))
                   )))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
              (defun org-capture-reinitialise-hook ()
                (when (display-graphic-p)
                  (set-org-capture-templates)
                  (remove-hook 'server-after-make-frame-hook
                               #'org-capture-reinitialise-hook))))))


;;;
;;;
;;; END_ORG
;;;
;;;
#+END_SRC

** Org GTD
:PROPERTIES:
:ID:       515ef8a5-cc71-4ad8-a24b-aa0b758e7bd4
:END:
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_GTD
;;;
;;;

;;(setq bmg/org-agenda-directory (concat org-directory "/gtd/"))
(setq org-archive-location (concat org-directory "/archive.org_archive::datetree/"))

(after! org
   ;; The 'bmg-org-roam-agenda' tag is used to tell vulpea that there is a todo item in this file
  (add-to-list 'org-tags-exclude-from-inheritance "bmg-org-roam-agenda"))

(use-package! vulpea
  :after org-agenda)

(defun bmg/vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.
TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun bmg/vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (bmg/vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (bmg/vulpea-project-p)
              (setq tags (cons "bmg-org-roam-agenda" tags))
            (setq tags (remove "bmg-org-roam-agenda" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

(defun bmg/vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun bmg/vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (like tag (quote "%\"bmg-org-roam-agenda\"%"))]))))

(defun bmg/vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (bmg/vulpea-project-files)))

(defun bmg/vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category))
         (result
          (or (if (and
                   title
                   (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))


(add-hook 'find-file-hook #'bmg/vulpea-project-update-tag)
(add-hook 'before-save-hook #'bmg/vulpea-project-update-tag)
(advice-add 'org-agenda :before #'bmg/vulpea-agenda-files-update)


(use-package! org-super-agenda
  :commands org-super-agenda-mode
  :config
  (setq org-agenda-prefix-format
        '((agenda . " %i %(bmg/vulpea-agenda-category 12)%?-12t% s")
          (todo . " %i %(bmg/vulpea-agenda-category 12) ")
          (tags . " %i %(bmg/vulpea-agenda-category 12) ")
          (search . " %i %(bmg/vaulpea-agenda-category 12) ")))

  (setq org-agenda-time-grid '((daily today require-timed) "----------------------" nil)
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-include-diary nil
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t
        org-agenda-start-day nil) ;; i.e. today

  ;;TODO fix the sections so that the match the todo-list (lang/org/config.el)
  (setq org-agenda-custom-commands
        '(("o" "Overview"
           ((agenda "" ((org-agenda-span 'week)
                        (org-agenda-start-on-weekday 0) ;; Sunday
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :todo "TODAY"
                            :scheduled today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "To Refile"
                             :tag "REFILE"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 3)
                            (:name "Ongoing"
                             :todo "STRT"
                             :order 3)
                            (:name "Personal"
                             :tag "PERSONAL"
                             :order 12)
                            (:name "Important"
                             :tag "Important"
                             :priority "A"
                             :order 6)
                            (:name "Due Today"
                             :deadline today
                             :order 2)
                            (:name "Due Soon"
                             :deadline future
                             :order 8)
                            (:name "Overdue"
                             :deadline past
                             :face error
                             :order 7)
                            (:name "Issues"
                             :tag "Issue"
                             :order 12)
                            (:name "Emacs"
                             :tag "Emacs"
                             :order 13)
                            (:name "Projects"
                             :tag "Project"
                             :order 14)
                            (:name "Research"
                             :tag "Research"
                             :order 15)
                            (:name "To read"
                             :tag "Read"
                             :order 30)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 20)
                            (:name "University"
                             :tag "uni"
                             :order 32)
                            (:name "Trivial"
                             :priority<= "E"
                             :tag ("Trivial" "Unimportant")
                             :todo ("SOMEDAY" )
                             :order 90)
                            (:discard (:tag ("Chore" "Routine" "Daily"))))))))))))


;; Moved outside the use-package! agenda so it shows on the home screen
(defun bmg/switch-to-agenda ()
    (interactive)
    (org-agenda nil "o"))

(after! org-agenda
   (org-super-agenda-mode))


;;;
;;;
;;; END_ORG_GTD
;;;
;;;

#+END_SRC
