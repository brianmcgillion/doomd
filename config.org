;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
* Code
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_code
;;;
;;;

;; use python3 by default
(setq python-shell-interpreter "python3")
(setq anaconda-mode-localhost-address "localhost")
;;(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
;(add-hook 'python-mode-hook 'anaconda-eldoc-mode)


;; Add handlers SELinux files
(add-to-list 'auto-mode-alist '("\\.te\\'" . m4-mode))

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)


(setq c-default-style "linux") ;; set style to "linux"

;; (after! lsp
;;   (setq lsp-lens-enable t
;;         lsp-headerline-breadcrumb-enable t
;;         lsp-modeline-code-actions-enable t
;;         lsp-diagnostics-provider :auto
;;         lsp-modeline-diagnostics-enable t
;;         lsp-signature-auto-activate t
;;         lsp-signature-render-documentation t
;;         lsp-completion-show-detail t
;;         lsp-completion-show-kind t))

;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-code-actions t
;;         lsp-ui-sideline-enable t
;;         lsp-ui-sideline-show-diagnostics t))

;;;
;;;
;;; END_code
;;;
;;;

#+END_SRC
* General

#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_General
;;;
;;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Brian McGillion"
      user-mail-address "brian@ssrc.tii.ae")

;; enable word-wrap in C/C++/ObjC/Java
;; (add-hook 'c-mode-common-hook #'+word-wrap-mode)

;; TODO see if this is too much and maybe only leave it for C
;; enable word-wrap (almost) everywhere
(+global-word-wrap-mode +1)

;; Autosave files when switching buffers
(use-package! super-save
  :defer t
  :config
  (setq auto-save-default nil)
  (setq super-save-exclude '(".gpg"))
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))

(use-package! elfeed-goodies
  :after elfeed)
(use-package! crux
  :defer t)
(use-package! imenu-anywhere
  :defer t)

(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-default-major-mode 'text-mode ;;markdown-mode
        atomic-chrome-buffer-open-style 'frame)
  (atomic-chrome-start-server))

(setq uniquify-buffer-name-style 'forward)
(setq which-key-idle-delay 0.5)

;; Store some more frequently used files in the
(set-register ?d '(file . "~/Documents/org/decrypt.org"))
(set-register ?e '(file . "~/.doom.d/config.org"))
(set-register ?i '(file . "~/Documents/org/gtd/inbox.org"))


;; Use a custom dictionary on linux
(if IS-MAC (setq ispell-dictionary "en_GB")
  (setq ispell-dictionary "en-custom"))


(use-package! company-tabnine
  :after company
  (add-to-list 'company-backends #'company-tabnine))

(setq company-minimum-prefix-length 0
      company-idle-delay 0.2
      company-show-numbers t)

;;(remove-hook 'company-mode-hook #'company-prescient-mode)

(set-language-environment-charset "UTF-8")

;; Configure language-tool for checkers/grammar
(setq langtool-language-tool-jar "~/tools/languagetool/languagetool-commandline.jar")

;; If a file changes on disk update the buffer to match
(global-auto-revert-mode t)

(after! tramp
  (setenv "SHELL" "/bin/bash")
  (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>î‚°] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) ;; defult + î‚°

;;;
;;;
;;; END_General
;;;
;;;

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Helm
;;;
;;;

;; check emacs version to stop helm hanging with tool tips, fixed in emacs 27
(if (< emacs-major-version 27)
     (setq x-wait-for-event-timeout 0))

(use-package! helm
  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  :bind (:map helm-map ;; Seems that it needs to be done in init
          ("<left>" . #'helm-previous-source)
          ("<right>" . #'helm-next-source)))

(after! helm
  (setq helm-google-suggest-use-curl-p        t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  ;; recent changes to helm have removed the left and right arrow keys
  ;; returning to that functionality
  ;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
  ;; for helm-find-files
  (customize-set-variable 'helm-ff-lynx-style-map t)
  ;; for helm-imenu
  (customize-set-variable 'helm-imenu-lynx-style-map t)
  ;; for semantic
  (customize-set-variable 'helm-semantic-lynx-style-map t)
  ;; for helm-occur
  (customize-set-variable 'helm-occur-use-ioccur-style-keys t)
  ;; for helm-grep
  (customize-set-variable 'helm-grep-use-ioccur-style-keys t))

(after! projectile
  (helm-projectile-on))

;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Interface_Tweaks
;;;
;;;

;; When starting a new frame make it maximized
(add-to-list 'initial-frame-alist '(fullscreen . fullboth))

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Blinking cursors are annoying
(blink-cursor-mode -1)

;; (after! pdf-tools
;;   ;; automatically turns on midnight-mode for
;;   (add-hook 'pdf-view-mode-hook (lambda ()
;;                                   (pdf-view-midnight-minor-mode))))

(setq +doom-dashboard-menu-sections
  '(("Open org-agenda"
     :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
     :action bmg/switch-to-agenda)
    ("Recently opened files"
     :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
     :action recentf-open-files)
    ("Open project"
     :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
     :action projectile-switch-project)
    ("RSS"
     :icon (all-the-icons-octicon "rss" :face 'font-lock-keyword-face)
     :action =rss)
    ("Slack"
     :icon (all-the-icons-octicon "comment-discussion" :face 'font-lock-keyword-face)
     :action slack-start)
    ("IRC"
     :icon (all-the-icons-faicon "comments" :face 'font-lock-keyword-face)
     :action =irc)
    ("Open private configuration"
     :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
     :when (file-directory-p doom-private-dir)
     :action doom/open-private-config)
    ("Open documentation"
     :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
     :action doom/help)
    ;; ("Notes"
    ;;  :icon (all-the-icons-octicon "light-bulb" :face 'font-lock-keyword-face)
    ;;  :action ragone-deft-or-close)
    ;; ("Passwords"
    ;;  :icon (all-the-icons-octicon "lock" :face 'font-lock-keyword-face)
    ;;  :action pass)

    ))


;;(setq fancy-splash-image (concat doom-private-dir "images/emacs-transparent.png"))

;;;
;;;
;;; END_Interface_Tweaks
;;;
;;;

#+END_SRC
* Map
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Map
;;;
;;;

(map! "C--"     #'undo-fu-only-undo
      "C-+"     #'undo-fu-only-redo

      (;;:org-roam
        :leader
        (:prefix-map ("z" . "roam")
          :desc "Org roam"                "l" #'org-roam
          :desc "Org roam insert"         "i" #'org-roam-insert
          :desc "Org roam switch buffer"  "b" #'org-roam-switch-to-buffer
          :desc "Org roam find file"      "f" #'org-roam-find-file
          :desc "Org roam show graph"     "g" #'org-roam-graph
          :desc "Org roam capture"        "c" #'org-roam-capture
          (:prefix ("d" . "by date")
            :desc "Arbitrary date" "d" #'org-roam-date
            :desc "Today"          "t" #'org-roam-today
            :desc "Tomorrow"       "m" #'org-roam-tomorrow
            :desc "Yesterday"      "y" #'org-roam-yesterday)))

      (;;:org-agenda
        "<f4>" #'org-agenda

        (:leader
        ;;; <leader> n --- notes
          (:prefix-map ("n" . "notes")
            :desc "Org agenda"  "a" #'bmg/switch-to-agenda))

        (:map org-agenda-mode-map
          "i"                       #'org-agenda-clock-in
          "r"                       #'bmg/org-process-inbox
          "R"                       #'org-agenda-refile
          "c"                       #'bmg/org-inbox-capture))

      (;;:helm
        [remap switch-to-buffer]    #'helm-mini
        [remap occur]               #'helm-occur

        (:leader                    ;; Top level C-c
          "r"                       #'helm-recentf)
        (:map minibuffer-local-map
          "C-c C-l"                 #'helm-minibuffer-history)
        (:map isearch-mode-map
          "C-o"                     #'helm-occur-from-isearch)
        (:map shell-mode-map
          "C-c C-l"                 #'helm-comint-input-ring))

      (;;: crux and stuff
        (:leader
   ;;; <leader> b --- prelude
          (:prefix-map ("b" . "prelude")
            :desc "crux-open-with"                         "o" #'crux-open-with
            :desc "crux-cleanup-buffer-or-region"          "n" #'crux-cleanup-buffer-or-region
            :desc "crux-indent-defun"                      "TAB" #''crux-indent-defun
            :desc "crux-view-url"                          "u" #'crux-view-url
            :desc "crux-transpose-windows"                 "s" #'crux-transpose-windows
            :desc "crux-delete-file-and-buffer"            "D" #'crux-delete-file-and-buffer
            :desc "crux-duplicate-current-line-or-region"  "d" #'crux-duplicate-current-line-or-region
            :desc "crux-rename-buffer-and-file"            "r" #'crux-rename-buffer-and-file
            :desc "helm-imenu-anywhere"                    "y" #'helm-imenu-anywhere
            :desc "Helm Bibtex"                            "b" #'helm-bibtex
            :desc "helm-imenu"                             "i" #'helm-imenu)))

) ;; END MAP


;;;
;;;
;;; END_Helm
;;;
;;;

#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG
;;;
;;;

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq! org-directory "~/Documents/org/"
       org-ellipsis " â–¾ "
       org-startup-folded t
       org-src-fontify-natively t)

(defvar my-roam-dir (concat org-directory "roam/"))

(setq! org-noter-notes-search-path my-roam-dir)

(setq! +biblio-pdf-library-dir "~/Documents/Papers/"
       +biblio-default-bibliography-files '("~/Documents/org/library.bib" "~/Documents/org/emacs_lit.bib")
       +biblio-notes-path my-roam-dir)

;;(setq bibtex-dialect 'biblatex)
(setq bibtex-dialect 'BibTeX)

(after! org-roam
  (setq org-roam-directory my-roam-dir
        org-roam-link-title-format "R:%s" ;;Distinguish internal Roam links from external links
        org-roam-graphviz-executable "/usr/bin/dot" ;; Visualize the relationships with notes
        org-roam-buffer-no-delete-other-windows nil
        +org-roam-open-buffer-on-find-file nil)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+TITLE: ${title}

- tags :: "
           :unnarrowed t)))
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "${slug}"
           :head "#+TITLE: ${title}
#+roam_key: ${ref}
#+roam_tags: website

- source :: ${ref}

- tags :: "
           :unnarrowed t))))

;; (after! org
;;   (set-company-backend! 'org-mode nil)
;; ;;TODO Trying to see if tabnine alone is ok, might need to put back in ispell
;;   (set-company-backend! 'org-mode '(company-tabnine))) ;;company-ispell

;;   (set-company-backend! 'org-mode '(company-dabbrev company-yasnippet company-ispell company-capf))) ;; company-tabnine


(use-package! org-chef
    :after org)

;;;
;;;
;;; END_ORG
;;;
;;;

#+END_SRC

** Org GTD
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG_GTD
;;;
;;;

(setq bmg/org-agenda-directory (concat org-directory "/gtd/"))
(setq org-archive-location (concat org-directory "/archive.org_archive::datetree/"))


(after! org-agenda
  (require 'find-lisp)
  (setq org-agenda-files (find-lisp-find-files "~/Documents/org/gtd/" "\.org$"))
  (add-to-list 'org-agenda-custom-commands
               `("r" "Reading" todo ""
                 ((org-agenda-files '(,(concat bmg/org-agenda-directory "reading.org")))))))


(after! org
  (setq org-default-notes-file (expand-file-name "inbox.org" bmg/org-agenda-directory))
  (setq +org-capture-todo-file org-default-notes-file
        +org-capture-notes-file org-default-notes-file
        +org-capture-projects-file org-default-notes-file)

  (setq org-log-done 'time
        org-log-into-drawer t
        org-log-state-notes-insert-after-drawers nil)

  (setq org-tag-alist (quote (("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?h)
                              (:newline)
                              ("WAITING" . ?w)
                              ("HOLD" . ?H)
                              ("CANCELLED" . ?c))))
  ;; Capture templates
  (add-to-list 'org-capture-templates
               `("i" "inbox" entry (file org-default-notes-file)
                 "* TODO %?"))

  (add-to-list 'org-capture-templates
               '("c" "Cookbook" entry (file org-default-notes-file)
                 "%(org-chef-get-recipe-from-url)" :empty-lines 1)))

(after! org-refile
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-targets '(("next.org" :level . 0)
                             ("someday.org" :level . 0)
                             ("reading.org" :level . 1)
                             ("projects.org" :maxlevel . 1))))


;;;
;;; Functions for managing the org-agenda ala Jethro
;;;
(defvar bmg/org-agenda-bulk-process-key ?f
  "Default key for bulk processing inbox items.")

(defun bmg/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "inbox:")
  (bmg/bulk-process-entries))

(defvar bmg/org-current-effort "1:00" "Current effort for agenda items.")

(defun bmg/my-org-agenda-set-effort (effort)
  "Set the effort property for the current headline."
  (interactive
   (list (read-string (format "Effort [%s]: " bmg/org-current-effort) nil nil bmg/org-current-effort)))
  (setq bmg/org-current-effort effort)
  (org-agenda-check-no-diary)
  (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                       (org-agenda-error)))
         (buffer (marker-buffer hdmarker))
         (pos (marker-position hdmarker))
         (inhibit-read-only t)
         newhead)
    (org-with-remote-undo buffer
      (with-current-buffer buffer
        (widen)
        (goto-char pos)
        (org-show-context 'agenda)
        (funcall-interactively 'org-set-effort nil bmg/org-current-effort)
        (end-of-line 1)
        (setq newhead (org-get-heading)))
      (org-agenda-change-all-lines newhead hdmarker))))

(defun bmg/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (call-interactively 'bmg/my-org-agenda-set-effort)
   (org-agenda-refile nil nil t)))

(defun bmg/bulk-process-entries ()
  (if (not (null org-agenda-bulk-marked-entries))
      (let ((entries (reverse org-agenda-bulk-marked-entries))
            (processed 0)
            (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region) (funcall 'bmg/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)")))))

(defun bmg/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(setq org-agenda-bulk-custom-functions `((,bmg/org-agenda-bulk-process-key bmg/org-agenda-process-inbox-item)))

(defun bmg/set-todo-state-next ()
  "Visit each parent task and change NEXT states to TODO"
  (org-todo "STRT"))

(add-hook 'org-clock-in-hook 'bmg/set-todo-state-next 'append)

;; MOved outside the use-package! agenda so it shows on the home screen
(defun bmg/switch-to-agenda ()
    (interactive)
    (org-agenda nil " "))

(use-package! org-agenda
  :after org
  :init
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t)
  :config
  (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  (setq org-agenda-custom-commands `((" " "Agenda"
                                      ((agenda ""
                                               ((org-agenda-span 'week)
                                                (org-deadline-warning-days 365)))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "To Refile")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "inbox.org")))))
                                       (todo "STRT|PROJ"
                                             ((org-agenda-overriding-header "In Progress")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "someday.org")
                                                                  ,(concat bmg/org-agenda-directory "projects.org")
                                                                  ,(concat bmg/org-agenda-directory "next.org")
                                                                  ,(concat bmg/org-agenda-directory "reading.org")))))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "Reading")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "reading.org")))))
                                       (todo "TODO|PROJ"
                                             ((org-agenda-overriding-header "Projects")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "projects.org")
                                                                  ,(concat bmg/org-agenda-directory "next.org")))))
                                       (todo "TODO"
                                             ((org-agenda-overriding-header "One-off Tasks")
                                              (org-agenda-files '(,(concat bmg/org-agenda-directory "next.org")
                                                                  ,(concat bmg/org-agenda-directory "someday.org")))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled)))))))))

;;;
;;;
;;; END_ORG_GTD
;;;
;;;

#+END_SRC
